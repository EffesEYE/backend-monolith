openapi: 3.0.0
info:
  title: EffesEYE Platform API
  version: 2020-10
  contact:
    email: chaluwa@gmail.com
    name: Charles Odili
  license:
    name: MIT
  description: |-
    Charles Odili just joined a fintech startup, EffesEYE, and was asked to lead the development of an urgent project on the table, a simple billing application.

    In order to have a view on the practicality of this new product, the Board asked that he develop and present an MVP of this product to them at the next Management meeting.

    Odili was required to build an MVP on the [FSI Sandbox](https://sandbox.fsi.ng/), integrated into the APIs of the available Banks and services of the Sandbox. This application can buy telephone credit, pay electricity bills and Pay TV bills (DSTV, Startimes, etc).


    Odili adopted an API-first approach, and this is the documentation convering the API that drives the services and features the EffesEYE billing (MVP) platform provides to customers.

    The API is deployed at [https://effeseye-api.herokuapp.com](https://effeseye-api.herokuapp.com), is managed by a secure admin application at [https://effeseye-admin.netlify.app](https://effeseye-admin.netlify.app), and is available for customers via an installable Progressive Web App at [https://effeseye-admin.netlify.app](https://effeseye-admin.netlify.app) 
  termsOfService: 'https://effeseye-api.herokuapp.com/tc'
servers:
  - url: 'https://effeseye-api.herokuapp.com'
    description: Production
paths:
  '/{version}/pay/{service}':
    post:
      summary: Payment service endpoint
      tags:
        - airtime
        - electricity
        - paytv
        - payments
      responses:
        '201':
          description: Created. Raised when the payment completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '401':
          description: Unauthorized. Usually raised due to supplying an invalid access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: post-airtime-recharge
      description: 'Buy airtime credit, pay for electricity or TV subscription with this endpoint'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
            examples:
              airtime-example:
                value:
                  amount: 1000
                  currency: NGN
                  provider: Airtel
                  sendTo: '+2348138145472'
                  accountToDebit: '0037514056'
              electricity-example:
                value:
                  amount: 8500
                  currency: NGN
                  provider: EKDC
                  sendTo: 56834930-5-4564-8-gbfg
                  accountToDebit: '0037514056'
              tv-example:
                value:
                  amount: 12000
                  currency: NGN
                  provider: DSTV
                  sendTo: 45783-08-fjsd0948503
                  accountToDebit: '0037514056'
        description: HTTP request payload for the payment service
      security:
        - Authorization: []
      parameters: []
    parameters:
      - schema:
          type: string
          minLength: 7
          maxLength: 7
          pattern: '^\d{4}-\d{2}$'
          example: 2020-10
        name: version
        in: path
        required: true
        description: The API version
      - schema:
          type: string
          enum:
            - airtime
            - electricity
            - tv
          minLength: 2
          maxLength: 11
        name: service
        in: path
        required: true
        description: The service you want to pay for
  '/{version}/pay/{paymentId}/status':
    parameters:
      - schema:
          type: string
        name: paymentId
        in: path
        required: true
        description: The request id of a previous airtime recharge request
      - schema:
          type: string
          minLength: 7
          maxLength: 7
          pattern: '^\d{4}-\d{2}$'
          example: 2020-10
        name: version
        in: path
        required: true
        description: The API version
    get:
      summary: Payment enquiry / status endpoint
      tags:
        - airtime
        - electricity
        - paytv
        - payments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
              examples:
                example:
                  value:
                    message: payment status
                    paymentId: 45934508043-583
                    status: SUCCEEDED
        '401':
          description: Unauthorized. Usually raised due to supplying an invalid access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-airtime-recharge-requestId
      description: Query the status of a payment transaction
      security:
        - Authorization: []
      parameters: []
  '/{version}/register':
    post:
      summary: The user registration and account creation endpoint
      tags:
        - BVN
        - email
        - phone number
        - registration
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountRegistrationResponse'
              examples:
                example:
                  value:
                    message: Account created
                    accountId: 5645f-5dw4358-hgf-34545345345
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountRegistrationResponse'
              examples:
                example:
                  value:
                    message: Account already exists!
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountRegistrationResponse'
              examples:
                example:
                  value:
                    message: Error handling your request. Pls contact support
      operationId: post-register
      description: Creates a new user account on the EffesEYE platform
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRegistrationRequest'
            examples:
              example:
                value:
                  bvn: '12345678901'
                  pswd: pa$$word
                  email: user@example.com
        description: The HTTP request payload of data needed to create the new account
    parameters:
      - schema:
          type: string
          example: 2020-10
          minLength: 7
          maxLength: 7
          pattern: '^\d{4}-\d{2}$'
        name: version
        in: path
        description: The API version
        required: true
  '/{version}/ping':
    get:
      summary: A meta endpoint for retrieving the server's pulse
      tags:
        - ping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PulseResponse'
              examples:
                example:
                  value:
                    message: 'EffesEYE API, Tuesday 4th October 2025'
      operationId: get-ping
      description: Get a pulse of the API service
    post:
      summary: Get the server's pulse
      tags:
        - ping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PulseResponse'
      operationId: post-ping
      description: Get a pulse of the server
    parameters:
      - schema:
          type: string
          minLength: 7
          maxLength: 7
          example: 2020-10
          pattern: '^\d{4}-\d{2}$'
        name: version
        in: path
        required: true
        description: The API version
  '/{version}':
    get:
      summary: The catch all / fall-back API endpoint
      tags:
        - ping
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema: {}
      operationId: get
      description: A catch-all / fall-back endpoint for the API
    post:
      summary: A catch all / fall-back endpoint
      tags:
        - ping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PulseResponse'
      operationId: post
      description: A catch all / fall-back endpoint
    parameters:
      - schema:
          type: string
          example: 2020-10
          minLength: 7
          maxLength: 7
          pattern: '^\d{4}-\d{2}$'
        name: version
        in: path
        description: The API version
        required: true
  '/{version}/auth/user-login':
    post:
      summary: PWA client user authentication
      tags:
        - auth
        - login
        - email
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                example:
                  value:
                    message: login successful
                    authToken: '567459867405764509769457694'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                example:
                  value:
                    message: 'login failed, pls check your credentials and retry'
      operationId: post-auth-user-login
      description: The endpoint for authenticating users and granting access into the client application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginReguest'
            examples:
              example:
                value:
                  pswd: pa55W0rd
                  email: user@example.com
        description: The HTTP request payload of data for user authentication
    parameters:
      - schema:
          type: string
          minLength: 7
          maxLength: 7
          example: 2020-10
          pattern: '^\d{4}-\d{2}$'
        name: version
        in: path
        required: true
        description: The API version
  '/{version}/auth/admin-login':
    post:
      summary: Admin user authentication
      tags:
        - auth
        - login
        - email
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                example:
                  value:
                    message: successful login
                    authToken: 56745967457640597645967405492-348-239-42
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                example:
                  value:
                    message: unsuccessful login
      operationId: post-auth-admin-login
      description: The endpoint for authenticating administrators and granting access into the admin application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginReguest'
            examples:
              example:
                value:
                  pswd: pa55W0rd
                  email: user@example.com
        description: The HTTP request payload of data for admin authentication
    parameters:
      - schema:
          type: string
          minLength: 7
          maxLength: 7
          example: 2020-10
          pattern: '^\d{4}-\d{2}$'
        name: version
        in: path
        required: true
        description: The API version
  '/{version}/spec':
    get:
      summary: Get the API specification
      tags:
        - spec
      responses:
        '200':
          description: OK
          content:
            text/yaml:
              schema:
                type: object
                properties: {}
      operationId: get-spec
      description: Retrieve the EffesEYE platform API specification
    parameters:
      - schema:
          type: string
          pattern: '^\d{4}-\d{2}$'
          minLength: 7
          maxLength: 7
          example: 2020-10
        name: version
        in: path
        required: true
        description: The API version
  '/{version}/auth/verify-token':
    parameters:
      - schema:
          type: string
          example: 2020-10
          pattern: '^\d{4}-\d{2}$'
          minLength: 7
          maxLength: 7
        name: version
        in: path
        required: true
        description: The API version
    post:
      summary: Verify a given authentication token
      tags:
        - auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                    description: Indicates the validity of the token in question
                required:
                  - verified
              examples:
                example:
                  value:
                    verified: true
      operationId: post-version-auth-verify-token
      description: 'Checks the validity and expiry of a token, and only returns true for tokens that have a valid cryptographic signature and have not expired'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to verify
              required:
                - token
            examples:
              example:
                value:
                  token: 67760385-30483gdlfkglkdfgtu9564967540764674hgdflhglkfhl2309-5403485
  '/{version}/bo/users':
    parameters:
      - schema:
          type: string
          example: 2020-10
          pattern: '^\d{4}-\d{2}$'
          minLength: 7
          maxLength: 7
        name: version
        in: path
        required: true
        description: The API version
    get:
      summary: Fetch user account data
      tags:
        - admin
        - user-data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListingResponse'
              examples:
                example:
                  value:
                    message: success
                    data:
                      - accountid: 45930953573nvvgjout4309u045043
                        firstname: Charles
                        lastname: Odili
                        accounttype: ADMIN
                        email: chalu@example.com
                        lastseen: '2020-10-24T15:38:12.580Z'
                        membersince: '2020-10-24T15:38:12.580Z'
        '401':
          description: Unauthorized. Usually raised due to supplying an invalid access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-version-bo-users
      description: Fetch a collection of registered users (accounts) on the platform
      parameters: []
      security:
        - Authorization: []
  '/{version}/bo/payments':
    parameters:
      - schema:
          type: string
          example: 2020-10
          pattern: '^\d{4}-\d{2}$'
          minLength: 7
          maxLength: 7
        name: version
        in: path
        required: true
        description: The API version
    get:
      summary: Fetch payments collection
      tags:
        - admin
        - payments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentsListingResponse'
              examples:
                example:
                  value:
                    message: payment successful
                    data:
                      - id: rgkdlkfj5695476947694
                        amount: 1000
                        currency: NGN
                        type: AIRTIME
                        status: SUCCEEDED
                        when: '2020-10-24T15:35:41.000Z'
                        details:
                          network: Airtel
        '401':
          description: Unauthorized. Usually raised due to supplying an invalid access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-version-bo-payments
      description: Fetch a collection of payments done on the patform
      parameters: []
      security:
        - Authorization: []
  '/{version}/account/add-bank':
    post:
      summary: Verify and add a (NUBAN) bank account
      tags:
        - NUBAN
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddBankAccountResponse'
        '401':
          description: Unauthorized. Usually raised due to supplying an invalid access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 'Forbidden. Raised if the NUBAN account number cannot be verifed, or the related EffesEYE account details are invalid'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: post-account-add-bank
      security:
        - Authorization: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBankAccountRequest'
            examples:
              example:
                value:
                  nuban: '0037514056'
                  bankname: UBA
        description: HTTP request payload to add a bank account
      description: 'Verify and add a NUBAN (bank account) number to a user''s EffesEYE account, allowing them initiate payments from the bank accounts'
    parameters:
      - schema:
          type: string
          pattern: '^\d{4}-\d{2}$'
          minLength: 7
          maxLength: 7
          example: 2020-10
        name: version
        in: path
        required: true
        description: The API version
  /:
    get:
      summary: Top level catch-all endpoint
      tags:
        - catch-all
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: string
      operationId: get-catch-all
      description: Catch-all endpoint with no version info
    post:
      summary: Top level catch-all endpoint
      operationId: post-catch-all
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: object
                properties: {}
      description: Catch-all endpoint with no version info
      tags:
        - catch-all
components:
  schemas:
    PaymentResponse:
      title: PaymentResponse
      type: object
      description: HTTP response payload for making a payment
      x-tags:
        - airtime
      x-examples: {}
      properties:
        message:
          type: string
          description: a message describing the status or progress of the payment
        paymentId:
          type: string
          description: The id of the payment request
        status:
          type: string
          description: 'The status of the payment request. Can be FAILED, PENDING, or SUCCEEDED'
          enum:
            - PENDING
            - FAILED
            - SUCCEEDED
        details:
          type: object
          description: An optional object containing additional information partaining to the payment attempted
      required:
        - message
        - paymentId
        - status
    PaymentRequest:
      title: PaymentRequest
      type: object
      x-tags:
        - airtime
      description: The HTTP request payload for making a payment
      properties:
        amount:
          type: integer
          description: The amount to pay for the service
        currency:
          type: string
          enum:
            - NGN
            - USD
          description: The ISO 4217 currency code the `amount` is expressed in
          minLength: 3
          maxLength: 3
        provider:
          type: string
          description: |-
            The provider whose service is being purchased:  

            > For airtime, this could be `Airtel`, `MTN`, `Glo`, `9Mobile` e.t.c.

            > For PayTV, this could be `DSTV`, `Startimes`, `GoTV` e.t.c

            > For electricity, this could be `EKDC`, `IKEDC`, `BEDC`, `IBEDC` e.t.c
        sendTo:
          type: string
          description: 'The corresponding phone number, meter number, or TV subscription Id to credit this recharge to'
        accountToDebit:
          type: string
          description: The verified (NUBAN) bank account to debit for this payment
          minLength: 10
          maxLength: 10
      required:
        - amount
        - currency
        - provider
        - sendTo
        - accountToDebit
    ErrorResponse:
      title: ErrorResponse
      type: object
      description: The HTTP response payload for requests that terminated with errors
      properties:
        message:
          type: string
          description: A statement or description of the error
      required:
        - message
    AccountRegistrationRequest:
      title: AccountRegistrationRequest
      type: object
      description: The HTTP palyload for a new account registration on the EffesEYE platform
      x-tags:
        - BVN
        - email
        - phone number
        - registration
      properties:
        bvn:
          type: string
          minLength: 11
          maxLength: 11
          description: The unique Bank Verification Number (BVN) of the new user
        pswd:
          type: string
          minLength: 6
          description: The user's password
          format: password
        email:
          type: string
          format: email
          description: The user's email address
          minLength: 8
      required:
        - bvn
        - pswd
        - email
    AccountRegistrationResponse:
      title: AccountRegistrationResponse
      type: object
      description: The HTTP response payload for account registration requests
      x-tags:
        - registration
        - BVN
      properties:
        message:
          type: string
          description: A status message on the registration request
        accountId:
          type: string
          description: The account ID of the successfully registered user. Only present on succcessful registration
      required:
        - message
    PulseResponse:
      title: PulseResponse
      type: object
      properties:
        message:
          type: string
          description: A message from the server
      required:
        - message
      description: A pulse response from the EffesEYE API server
    LoginReguest:
      title: LoginReguest
      type: object
      description: The HTTP request payload schema
      properties:
        pswd:
          type: string
          minLength: 6
          description: The user account password
        email:
          type: string
          format: email
          description: The user account email
      required:
        - pswd
        - email
    LoginResponse:
      title: LoginResponse
      type: object
      description: HTTP response payload schema
      properties:
        message:
          type: string
          description: Status of the login attempt
        authToken:
          type: string
          description: An authorization token provided on successful login. Automatically expires after 15 minutes
      required:
        - message
    UsersListingResponse:
      title: UsersListingResponse
      type: object
      description: HTTP response payload for fetching a list of user (account) data
      x-tags:
        - admin
        - user-data
      properties:
        message:
          type: string
          description: A message describing the handling of the request. Will be helful if there was an error
        data:
          type: array
          description: An array of user account data objects
          items:
            $ref: '#/components/schemas/UserData'
      required:
        - message
    UserData:
      title: UserData
      type: object
      description: Data represneting a user in the platform
      x-tags:
        - admin
        - user-data
      properties:
        accountid:
          type: string
          description: The account-id of the user
        firstname:
          type: string
          description: The user's firstname
        lastname:
          type: string
          description: The user's lastname
        email:
          type: string
          description: The user's email address
        lastseen:
          description: The timestamp of when the user last logged into the platform
          type: string
        membersince:
          description: The timestamp of when the account was created
          type: string
        accounttype:
          type: string
          enum:
            - USER
            - ADMIN
          description: The user account type
      required:
        - accountid
        - firstname
        - lastname
        - email
        - lastseen
        - membersince
        - accounttype
    PaymentsListingResponse:
      title: PaymentsListingResponse
      type: object
      description: HTTP response payload for fetching payments data
      properties:
        message:
          type: string
          description: The request status description
        data:
          type: array
          description: An array of payment data objects
          items:
            $ref: '#/components/schemas/PaymentData'
      required:
        - message
    PaymentData:
      title: PaymentData
      type: object
      description: Data representing a payment on the platform
      properties:
        id:
          type: string
          description: The payment record ID
        amount:
          type: number
          description: The payment transaction amount
        currency:
          type: string
          enum:
            - NGN
            - USD
          description: The payment transaction currency
        type:
          type: string
          enum:
            - AIRTIME
            - ELECTRICITY
            - PAYTV
          description: 'What was paid for. Either `Airtime`, `Electricity`, or `PayTV`'
        status:
          type: string
          enum:
            - PENDING
            - FAILED
            - SUCCEEDED
          description: 'The status of the payment, which will either be `Failed`, `Pending`, or `Succeeded`'
        when:
          description: A timestamp of when the payment occured
          type: string
        details:
          type: object
          description: Extra details and metadate about the payment. Specific to the type of payment
      required:
        - id
        - amount
        - currency
        - type
        - status
        - when
    AddBankAccountRequest:
      title: AddBankAccountRequest
      type: object
      description: HTTP request payload to add a bank account
      properties:
        nuban:
          type: string
          minLength: 10
          maxLength: 10
          description: The NUBAN account number
        bankname:
          type: string
          minLength: 3
          description: The name of the Bank
      required:
        - nuban
        - bankname
    AddBankAccountResponse:
      title: AddBankAccountResponse
      type: object
      description: HTTP response payload from attempting to verify and add a NUBAN account
      properties:
        message:
          type: string
          description: description of handling the request
        status:
          type: string
          enum:
            - FAILED
            - SUCCEEDED
          description: The status of the operation
      required:
        - message
        - status
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      description: The HTTP Authorization header containing a valid access token designated as `Bearer`
tags:
  - name: airtime
  - name: BVN
  - name: email
  - name: phone number
  - name: registration
  - name: ping
  - name: auth
  - name: login
  - name: spec
  - name: admin
  - name: user-data
  - name: payments
  - name: electricity
  - name: paytv
  - name: NUBAN
  - name: catch-all
